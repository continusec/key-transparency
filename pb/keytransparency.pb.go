// Code generated by protoc-gen-go.
// source: keytransparency.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	keytransparency.proto

It has these top-level messages:
	MapVUFFetchMetadataRequest
	MapVUFFetchMetadataResponse
	MailTokenRequest
	MailTokenResponse
	MapVUFSetKeyRequest
	MapVUFSetKeyResponse
	MapVUFGetKeyRequest
	MapVUFGetKeyResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import com_continusec_verifiabledatastructures_api "github.com/continusec/verifiabledatastructures/pb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MapVUFFetchMetadataRequest struct {
}

func (m *MapVUFFetchMetadataRequest) Reset()                    { *m = MapVUFFetchMetadataRequest{} }
func (m *MapVUFFetchMetadataRequest) String() string            { return proto.CompactTextString(m) }
func (*MapVUFFetchMetadataRequest) ProtoMessage()               {}
func (*MapVUFFetchMetadataRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MapVUFFetchMetadataResponse struct {
	VufPublicKey    []byte `protobuf:"bytes,1,opt,name=vuf_public_key,json=vufPublicKey,proto3" json:"vuf_public_key,omitempty"`
	ServerPublicKey []byte `protobuf:"bytes,2,opt,name=server_public_key,json=serverPublicKey,proto3" json:"server_public_key,omitempty"`
}

func (m *MapVUFFetchMetadataResponse) Reset()                    { *m = MapVUFFetchMetadataResponse{} }
func (m *MapVUFFetchMetadataResponse) String() string            { return proto.CompactTextString(m) }
func (*MapVUFFetchMetadataResponse) ProtoMessage()               {}
func (*MapVUFFetchMetadataResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MapVUFFetchMetadataResponse) GetVufPublicKey() []byte {
	if m != nil {
		return m.VufPublicKey
	}
	return nil
}

func (m *MapVUFFetchMetadataResponse) GetServerPublicKey() []byte {
	if m != nil {
		return m.ServerPublicKey
	}
	return nil
}

type MailTokenRequest struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
}

func (m *MailTokenRequest) Reset()                    { *m = MailTokenRequest{} }
func (m *MailTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*MailTokenRequest) ProtoMessage()               {}
func (*MailTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MailTokenRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type MailTokenResponse struct {
}

func (m *MailTokenResponse) Reset()                    { *m = MailTokenResponse{} }
func (m *MailTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*MailTokenResponse) ProtoMessage()               {}
func (*MailTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type MapVUFSetKeyRequest struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Token string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
}

func (m *MapVUFSetKeyRequest) Reset()                    { *m = MapVUFSetKeyRequest{} }
func (m *MapVUFSetKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*MapVUFSetKeyRequest) ProtoMessage()               {}
func (*MapVUFSetKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MapVUFSetKeyRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MapVUFSetKeyRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *MapVUFSetKeyRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type MapVUFSetKeyResponse struct {
	MapResponse *com_continusec_verifiabledatastructures_api.MapSetValueResponse `protobuf:"bytes,1,opt,name=map_response,json=mapResponse" json:"map_response,omitempty"`
}

func (m *MapVUFSetKeyResponse) Reset()                    { *m = MapVUFSetKeyResponse{} }
func (m *MapVUFSetKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*MapVUFSetKeyResponse) ProtoMessage()               {}
func (*MapVUFSetKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MapVUFSetKeyResponse) GetMapResponse() *com_continusec_verifiabledatastructures_api.MapSetValueResponse {
	if m != nil {
		return m.MapResponse
	}
	return nil
}

type MapVUFGetKeyRequest struct {
	Key      []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	TreeSize int64  `protobuf:"varint,2,opt,name=tree_size,json=treeSize" json:"tree_size,omitempty"`
}

func (m *MapVUFGetKeyRequest) Reset()                    { *m = MapVUFGetKeyRequest{} }
func (m *MapVUFGetKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*MapVUFGetKeyRequest) ProtoMessage()               {}
func (*MapVUFGetKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MapVUFGetKeyRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MapVUFGetKeyRequest) GetTreeSize() int64 {
	if m != nil {
		return m.TreeSize
	}
	return 0
}

type MapVUFGetKeyResponse struct {
	VufResult   []byte                                                           `protobuf:"bytes,1,opt,name=vuf_result,json=vufResult,proto3" json:"vuf_result,omitempty"`
	MapResponse *com_continusec_verifiabledatastructures_api.MapGetValueResponse `protobuf:"bytes,2,opt,name=map_response,json=mapResponse" json:"map_response,omitempty"`
}

func (m *MapVUFGetKeyResponse) Reset()                    { *m = MapVUFGetKeyResponse{} }
func (m *MapVUFGetKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*MapVUFGetKeyResponse) ProtoMessage()               {}
func (*MapVUFGetKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MapVUFGetKeyResponse) GetVufResult() []byte {
	if m != nil {
		return m.VufResult
	}
	return nil
}

func (m *MapVUFGetKeyResponse) GetMapResponse() *com_continusec_verifiabledatastructures_api.MapGetValueResponse {
	if m != nil {
		return m.MapResponse
	}
	return nil
}

func init() {
	proto.RegisterType((*MapVUFFetchMetadataRequest)(nil), "com.continusec.keytransparency.api.MapVUFFetchMetadataRequest")
	proto.RegisterType((*MapVUFFetchMetadataResponse)(nil), "com.continusec.keytransparency.api.MapVUFFetchMetadataResponse")
	proto.RegisterType((*MailTokenRequest)(nil), "com.continusec.keytransparency.api.MailTokenRequest")
	proto.RegisterType((*MailTokenResponse)(nil), "com.continusec.keytransparency.api.MailTokenResponse")
	proto.RegisterType((*MapVUFSetKeyRequest)(nil), "com.continusec.keytransparency.api.MapVUFSetKeyRequest")
	proto.RegisterType((*MapVUFSetKeyResponse)(nil), "com.continusec.keytransparency.api.MapVUFSetKeyResponse")
	proto.RegisterType((*MapVUFGetKeyRequest)(nil), "com.continusec.keytransparency.api.MapVUFGetKeyRequest")
	proto.RegisterType((*MapVUFGetKeyResponse)(nil), "com.continusec.keytransparency.api.MapVUFGetKeyResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KeyTransparencyService service

type KeyTransparencyServiceClient interface {
	MapVUFFetchMetadata(ctx context.Context, in *MapVUFFetchMetadataRequest, opts ...grpc.CallOption) (*MapVUFFetchMetadataResponse, error)
	MapVUFSetValue(ctx context.Context, in *MapVUFSetKeyRequest, opts ...grpc.CallOption) (*MapVUFSetKeyResponse, error)
	MapVUFGetValue(ctx context.Context, in *MapVUFGetKeyRequest, opts ...grpc.CallOption) (*MapVUFGetKeyResponse, error)
	MailToken(ctx context.Context, in *MailTokenRequest, opts ...grpc.CallOption) (*MailTokenResponse, error)
}

type keyTransparencyServiceClient struct {
	cc *grpc.ClientConn
}

func NewKeyTransparencyServiceClient(cc *grpc.ClientConn) KeyTransparencyServiceClient {
	return &keyTransparencyServiceClient{cc}
}

func (c *keyTransparencyServiceClient) MapVUFFetchMetadata(ctx context.Context, in *MapVUFFetchMetadataRequest, opts ...grpc.CallOption) (*MapVUFFetchMetadataResponse, error) {
	out := new(MapVUFFetchMetadataResponse)
	err := grpc.Invoke(ctx, "/com.continusec.keytransparency.api.KeyTransparencyService/MapVUFFetchMetadata", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyServiceClient) MapVUFSetValue(ctx context.Context, in *MapVUFSetKeyRequest, opts ...grpc.CallOption) (*MapVUFSetKeyResponse, error) {
	out := new(MapVUFSetKeyResponse)
	err := grpc.Invoke(ctx, "/com.continusec.keytransparency.api.KeyTransparencyService/MapVUFSetValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyServiceClient) MapVUFGetValue(ctx context.Context, in *MapVUFGetKeyRequest, opts ...grpc.CallOption) (*MapVUFGetKeyResponse, error) {
	out := new(MapVUFGetKeyResponse)
	err := grpc.Invoke(ctx, "/com.continusec.keytransparency.api.KeyTransparencyService/MapVUFGetValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyTransparencyServiceClient) MailToken(ctx context.Context, in *MailTokenRequest, opts ...grpc.CallOption) (*MailTokenResponse, error) {
	out := new(MailTokenResponse)
	err := grpc.Invoke(ctx, "/com.continusec.keytransparency.api.KeyTransparencyService/MailToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KeyTransparencyService service

type KeyTransparencyServiceServer interface {
	MapVUFFetchMetadata(context.Context, *MapVUFFetchMetadataRequest) (*MapVUFFetchMetadataResponse, error)
	MapVUFSetValue(context.Context, *MapVUFSetKeyRequest) (*MapVUFSetKeyResponse, error)
	MapVUFGetValue(context.Context, *MapVUFGetKeyRequest) (*MapVUFGetKeyResponse, error)
	MailToken(context.Context, *MailTokenRequest) (*MailTokenResponse, error)
}

func RegisterKeyTransparencyServiceServer(s *grpc.Server, srv KeyTransparencyServiceServer) {
	s.RegisterService(&_KeyTransparencyService_serviceDesc, srv)
}

func _KeyTransparencyService_MapVUFFetchMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapVUFFetchMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServiceServer).MapVUFFetchMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.continusec.keytransparency.api.KeyTransparencyService/MapVUFFetchMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServiceServer).MapVUFFetchMetadata(ctx, req.(*MapVUFFetchMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyService_MapVUFSetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapVUFSetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServiceServer).MapVUFSetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.continusec.keytransparency.api.KeyTransparencyService/MapVUFSetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServiceServer).MapVUFSetValue(ctx, req.(*MapVUFSetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyService_MapVUFGetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapVUFGetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServiceServer).MapVUFGetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.continusec.keytransparency.api.KeyTransparencyService/MapVUFGetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServiceServer).MapVUFGetValue(ctx, req.(*MapVUFGetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyTransparencyService_MailToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MailTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyTransparencyServiceServer).MailToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.continusec.keytransparency.api.KeyTransparencyService/MailToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyTransparencyServiceServer).MailToken(ctx, req.(*MailTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyTransparencyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.continusec.keytransparency.api.KeyTransparencyService",
	HandlerType: (*KeyTransparencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MapVUFFetchMetadata",
			Handler:    _KeyTransparencyService_MapVUFFetchMetadata_Handler,
		},
		{
			MethodName: "MapVUFSetValue",
			Handler:    _KeyTransparencyService_MapVUFSetValue_Handler,
		},
		{
			MethodName: "MapVUFGetValue",
			Handler:    _KeyTransparencyService_MapVUFGetValue_Handler,
		},
		{
			MethodName: "MailToken",
			Handler:    _KeyTransparencyService_MailToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keytransparency.proto",
}

func init() { proto.RegisterFile("keytransparency.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0x71, 0x52, 0x10, 0x99, 0x46, 0xa5, 0xdd, 0x16, 0x54, 0xb9, 0x20, 0x21, 0x8b, 0x43,
	0xc4, 0xc1, 0x95, 0x0a, 0x08, 0x4e, 0x80, 0x10, 0xaa, 0x0f, 0x51, 0x24, 0x64, 0x97, 0x1e, 0xb8,
	0x44, 0x9b, 0x65, 0x22, 0x56, 0x71, 0xec, 0x65, 0x3f, 0x2c, 0x39, 0x9c, 0x79, 0x07, 0xc4, 0xcb,
	0xf0, 0x6a, 0x68, 0xd7, 0x76, 0x88, 0x43, 0x3f, 0x73, 0xf3, 0xcc, 0xce, 0xfc, 0xf7, 0xff, 0xd3,
	0xcc, 0x1a, 0x1e, 0xce, 0xb0, 0xd4, 0x92, 0x66, 0x4a, 0x50, 0x89, 0x19, 0x2b, 0x43, 0x21, 0x73,
	0x9d, 0x93, 0x80, 0xe5, 0xf3, 0x90, 0xe5, 0x99, 0xe6, 0x99, 0x51, 0xc8, 0xc2, 0xf5, 0x2a, 0x2a,
	0xb8, 0x3f, 0x28, 0x50, 0xf2, 0x29, 0xa7, 0x93, 0x14, 0xbf, 0x52, 0x4d, 0x95, 0x96, 0x86, 0x69,
	0x23, 0x51, 0x1d, 0x3b, 0x8d, 0x63, 0x2a, 0x78, 0xa5, 0x16, 0x3c, 0x06, 0x7f, 0x44, 0xc5, 0xf9,
	0xe7, 0xd3, 0x53, 0xd4, 0xec, 0xdb, 0x08, 0x35, 0xb5, 0x0d, 0x31, 0x7e, 0x37, 0xa8, 0x74, 0x90,
	0xc3, 0xd1, 0x85, 0xa7, 0x4a, 0xe4, 0x99, 0x42, 0xf2, 0x0c, 0x76, 0x0a, 0x33, 0x1d, 0x0b, 0x33,
	0x49, 0x39, 0x1b, 0xcf, 0xb0, 0x3c, 0xf4, 0x9e, 0x7a, 0x83, 0x7e, 0xdc, 0x2f, 0xcc, 0xf4, 0x93,
	0x4b, 0x0e, 0xb1, 0x24, 0xcf, 0x61, 0x4f, 0xa1, 0x2c, 0x50, 0xae, 0x16, 0x76, 0x5c, 0xe1, 0x83,
	0xea, 0x60, 0x59, 0x1b, 0x0c, 0x60, 0x77, 0x44, 0x79, 0x7a, 0x96, 0xcf, 0x30, 0xab, 0x4d, 0x90,
	0x03, 0xb8, 0x8b, 0x73, 0xca, 0x53, 0x27, 0xde, 0x8b, 0xab, 0x20, 0xd8, 0x87, 0xbd, 0x95, 0xca,
	0xca, 0x50, 0x90, 0xc0, 0x7e, 0xe5, 0x37, 0x41, 0x3d, 0xc4, 0xb2, 0x51, 0xd8, 0x85, 0xee, 0x3f,
	0x73, 0xf6, 0xd3, 0x6a, 0x16, 0x34, 0x35, 0x58, 0xfb, 0xa8, 0x02, 0x9b, 0xd5, 0x56, 0xef, 0xb0,
	0x5b, 0xdd, 0xe4, 0x82, 0xe0, 0x07, 0x1c, 0xb4, 0x45, 0x6b, 0x7a, 0x06, 0xfd, 0x39, 0x15, 0x63,
	0x59, 0xc7, 0x4e, 0x7e, 0xfb, 0xe4, 0x7d, 0xb8, 0x36, 0x9f, 0xcb, 0x46, 0x61, 0x07, 0x15, 0x8e,
	0xa8, 0x48, 0x50, 0x9f, 0xdb, 0xdb, 0x1b, 0xdd, 0x78, 0x7b, 0x4e, 0xc5, 0x92, 0xe8, 0x63, 0x43,
	0x14, 0x5d, 0x43, 0x74, 0x04, 0x3d, 0x2d, 0x11, 0xc7, 0x8a, 0x2f, 0x2a, 0xaa, 0x6e, 0x7c, 0xdf,
	0x26, 0x12, 0xbe, 0xc0, 0xe0, 0xb7, 0xd7, 0x30, 0x44, 0x6d, 0x86, 0x27, 0x00, 0x76, 0x82, 0x12,
	0x95, 0x49, 0x75, 0x2d, 0xd7, 0x2b, 0xcc, 0x34, 0x76, 0x89, 0xff, 0x10, 0x3b, 0x9b, 0x21, 0x46,
	0x57, 0x21, 0x9e, 0xfc, 0xd9, 0x82, 0x47, 0x43, 0x2c, 0xcf, 0x56, 0x96, 0x38, 0x41, 0x59, 0x70,
	0x86, 0xe4, 0x97, 0xd7, 0xe0, 0xb7, 0x16, 0x90, 0xbc, 0x0d, 0xaf, 0x7f, 0x04, 0xe1, 0xe5, 0x7b,
	0xed, 0xbf, 0xdb, 0xb8, 0xbf, 0x1e, 0xcb, 0x1d, 0xf2, 0xd3, 0x83, 0x9d, 0xe5, 0x5a, 0x38, 0x3a,
	0xf2, 0xfa, 0xe6, 0xaa, 0xad, 0xfd, 0xf4, 0xdf, 0xdc, 0xbe, 0xf1, 0x02, 0x1f, 0xd1, 0x06, 0x3e,
	0xa2, 0x4d, 0x7d, 0x44, 0xeb, 0x3e, 0x16, 0xd0, 0x5b, 0xbe, 0x47, 0xf2, 0xf2, 0x66, 0x42, 0xed,
	0x87, 0xee, 0xbf, 0xba, 0x65, 0x57, 0x73, 0xf7, 0x87, 0xad, 0x2f, 0x1d, 0x31, 0x99, 0xdc, 0x73,
	0x7f, 0xb4, 0x17, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x10, 0x33, 0xa5, 0x59, 0x38, 0x05, 0x00,
	0x00,
}
